purge_LEP_templates = {
	if = {
		limit = { has_template = "Qibing Xie" }
		delete_unit_template_and_units = { division_template = "Qibing Xie" }
	}
	if = {
		limit = { has_template = "Bubing Xie" }
		delete_unit_template_and_units = { division_template = "Bubing Xie" }
	}
	if = {
		limit = {
			has_template = "Bubing Zhen"
			NOT = { tag = GXC } #has a template of the same name
		}
		delete_unit_template_and_units = { division_template = "Bubing Zhen" }
	}
	if = {
		limit = { has_template = "Paobing Zhen" }
		delete_unit_template_and_units = { division_template = "Paobing Zhen" }
	}
	if = {
		limit = {
			has_template = "Minbing"
			NOT = { tag = ANQ } #uses the same template
		}
		delete_unit_template_and_units = { division_template = "Minbing" }
	}
	if = {
		limit = { has_template = "Polizeitruppe" }
		delete_unit_template_and_units = { division_template = "Polizeitruppe" }
	}
	if = {
		limit = { has_template = "Polizeitruppe Liangguang" }
		delete_unit_template_and_units = { division_template = "Polizeitruppe Liangguang" }
	}
	if = {
		limit = { has_template = "Nanjing Bubing Zhen" }
		delete_unit_template_and_units = { division_template = "Nanjing Bubing Zhen" }
	}
	if = {
		limit = { has_template = "Nanjing Paobing Zhen" }
		delete_unit_template_and_units = { division_template = "Nanjing Paobing Zhen" }
	}
	if = {
		limit = { has_template = "Jiangsu Bubing Zhen" }
		delete_unit_template_and_units = { division_template = "Jiangsu Bubing Zhen" }
	}
	if = {
		limit = { has_template = "Jiangsu Bubing Xie" }
		delete_unit_template_and_units = { division_template = "Jiangsu Bubing Xie" }
	}
	if = {
		limit = { has_template = "Zhejiang Bubing Zhen" }
		delete_unit_template_and_units = { division_template = "Zhejiang Bubing Zhen" }
	}
	if = {
		limit = { has_template = "Zhejiang Bubing Xie" }
		delete_unit_template_and_units = { division_template = "Zhejiang Bubing Xie" }
	}
	if = {
		limit = { has_template = "Fujian Bubing Zhen" }
		delete_unit_template_and_units = { division_template = "Fujian Bubing Zhen" }
	}
	if = {
		limit = { has_template = "Fujian Bubing Xie" }
		delete_unit_template_and_units = { division_template = "Fujian Bubing Xie" }
	}
	if = {
		limit = { has_template = "Jiangxi Bubing Zhen" }
		delete_unit_template_and_units = { division_template = "Jiangxi Bubing Zhen" }
	}
	if = {
		limit = { has_template = "Jiangxi Bubing Xie" }
		delete_unit_template_and_units = { division_template = "Jiangxi Bubing Xie" }
	}
}

unlock_LEP_templates = {
	if = {
		limit = { has_template = "Minbing" }
		set_division_template_lock = {
			division_template = "Minbing"
			is_locked = no
		}
	}
	if = {
		limit = { has_template = "Polizeitruppe" }
		set_division_template_lock = {
			division_template = "Polizeitruppe"
			is_locked = no
		}
	}
	if = {
		limit = { has_template = "Polizeitruppe Liangguang" }
		set_division_template_lock = {
			division_template = "Polizeitruppe Liangguang"
			is_locked = no
		}
	}
	if = {
		limit = { has_template = "Nanjing Bubing Zhen" }
		set_division_template_lock = {
			division_template = "Nanjing Bubing Zhen"
			is_locked = no
		}
	}
	if = {
		limit = { has_template = "Nanjing Paobing Zhen" }
		set_division_template_lock = {
			division_template = "Nanjing Paobing Zhen"
			is_locked = no
		}
	}
	if = {
		limit = { has_template = "Jiangsu Bubing Zhen" }
		set_division_template_lock = {
			division_template = "Jiangsu Bubing Zhen"
			is_locked = no
		}
	}
	if = {
		limit = { has_template = "Jiangsu Bubing Xie" }
		set_division_template_lock = {
			division_template = "Jiangsu Bubing Xie"
			is_locked = no
		}
	}
	if = {
		limit = { has_template = "Zhejiang Bubing Zhen" }
		set_division_template_lock = {
			division_template = "Zhejiang Bubing Zhen"
			is_locked = no
		}
	}
	if = {
		limit = { has_template = "Zhejiang Bubing Xie" }
		set_division_template_lock = {
			division_template = "Zhejiang Bubing Xie"
			is_locked = no
		}
	}
	if = {
		limit = { has_template = "Fujian Bubing Zhen" }
		set_division_template_lock = {
			division_template = "Fujian Bubing Zhen"
			is_locked = no
		}
	}
	if = {
		limit = { has_template = "Fujian Bubing Xie" }
		set_division_template_lock = {
			division_template = "Fujian Bubing Xie"
			is_locked = no
		}
	}
	if = {
		limit = { has_template = "Jiangxi Bubing Zhen" }
		set_division_template_lock = {
			division_template = "Jiangxi Bubing Zhen"
			is_locked = no
		}
	}
	if = {
		limit = { has_template = "Jiangxi Bubing Xie" }
		set_division_template_lock = {
			division_template = "Jiangxi Bubing Xie"
			is_locked = no
		}
	}
}

remove_claim_by_ROOT_and_add_core_of_ROOT = {
	if = {
		limit = { is_claimed_by = ROOT }
		remove_claim_by = ROOT
	}
	if = {
		limit = { NOT = { is_core_of = ROOT } }
		add_core_of = ROOT
	}
}

remove_cores_of_dead_tags = {
	hidden_effect = {
		if = {
			limit = {
				OR = {
					is_han_chinese_tag = yes
					tag = TAN
				}
			}
			for_each_loop = {
				array = global.china_tags_array
				var:v = {
					if = {
						limit = {
							exists = no
							is_non_han_chinese_tag = no
						}
						for_each_loop = {
							array = ROOT.owned_states
							var:v = {
								remove_claim_by = PREV
								remove_core_of = PREV
							}
						}
					}
				}
			}
		}
	}
}

save_faction_into_array = {
	every_other_country = {
		limit = {
			is_in_faction_with = ROOT
			NOT = { tag = ROOT }
		}
		add_to_array = { ROOT.chinese_faction_members = THIS }
	}
	set_country_flag = was_chinese_faction_leader
	dismantle_faction = yes
}

china_reform_faction = {
	if = {
		limit = {
			tag = UPC
		}
		create_faction = china_upc_faction
	}
	else_if = {
		limit = {
			tag = NPA
		}
		create_faction = npa_faction
	}
	else_if = {
		limit = {
			tag = event_target:yunnan_R_KMT_faction_leader
		}
		create_faction = yunnan_R_KMT_faction
	}
	else_if = {
		limit = {
			tag = CHI
			has_completed_focus = CHI_form_eastasia_faction
		}
		create_faction = EANL_faction
	}
	else_if = {
		limit = {
			tag = QIE
			has_country_flag = created_northern_zhili_faction
		}
		clr_country_flag = created_northern_zhili_faction
		create_faction = north_zhili_faction
	}
	else_if = {
		limit = {
			tag = QIE
			has_country_flag = created_zhili_faction
		}
		clr_country_flag = created_zhili_faction
		create_faction = all_zhili_faction
	}
	else_if = {
		limit = {
			tag = QIE
			has_country_flag = created_qing_faction
		}
		clr_country_flag = created_qing_faction
		create_faction = qing_sphere_faction
	}
}

chinese_united_front_ceasefire = {
	custom_effect_tooltip = china_ceasefire_occupation_transfer
	hidden_effect = {
		### create array of all occupied states in territory belonging to FROM, its puppets and faction members, or any future UF members
		for_each_scope_loop = {
			array = ROOT.controlled_states
			if = {
				limit = {
					owner = {
						NOT = { tag = ROOT }
						is_chinese_tag = yes
						OR = {
							is_ally_with = FROM
							has_country_flag = united_front_member
						}
					}
				}
				add_to_temp_array = { global.ROOT_ceasefire_states = THIS }
			}
		}
		for_each_scope_loop = {
			array = ROOT.subjects
			for_each_scope_loop = {
				array = THIS.controlled_states
				if = {
					limit = {
						owner = {
							NOT = { tag = PREV.PREV }
							is_chinese_tag = yes
							OR = {
								is_ally_with = FROM
								has_country_flag = united_front_member
							}
						}
					}
					add_to_temp_array = { global.ROOT_ceasefire_states = THIS }
				}
			}
		}
		for_each_scope_loop = {
			array = ROOT.faction_members
			for_each_scope_loop = {
				array = THIS.controlled_states
				if = {
					limit = {
						owner = {
							NOT = { tag = PREV.PREV }
							is_chinese_tag = yes
							OR = {
								is_ally_with = FROM
								has_country_flag = united_front_member
							}
						}
					}
					add_to_temp_array = { global.ROOT_ceasefire_states = THIS }
				}
			}
		}

		### create array of all occupied states in territory belonging to ROOT, its puppets and faction members
		for_each_scope_loop = {
			array = FROM.controlled_states
			if = {
				limit = {
					owner = {
						NOT = { tag = FROM }
						is_chinese_tag = yes
						is_ally_with = ROOT
					}
				}
				add_to_temp_array = { global.FROM_ceasefire_states = THIS }
			}
		}
		for_each_scope_loop = {
			array = FROM.subjects
			for_each_scope_loop = {
				array = THIS.controlled_states
				if = {
					limit = {
						owner = {
							NOT = { tag = PREV.PREV }
							is_chinese_tag = yes
							is_ally_with = ROOT
						}
					}
					add_to_temp_array = { global.FROM_ceasefire_states = THIS }
				}
			}
		}
		for_each_scope_loop = {
			array = FROM.faction_members
			for_each_scope_loop = {
				array = THIS.controlled_states
				if = {
					limit = {
						owner = {
							NOT = { tag = PREV.PREV }
							is_chinese_tag = yes
							is_ally_with = ROOT
						}
					}
					add_to_temp_array = { global.FROM_ceasefire_states = THIS }
				}
			}
		}

		### manual override for lake states
		every_state = {
			limit = {
				OR = {
					state = 598 #Huaiyang
					state = 604 #Xining
					state = 613 #Jinling
					state = 1044 #Yuzhang
				}
			}
			if = {
				limit = {
					controller = {
						is_ally_with = ROOT
					}
					owner = {
						OR = {
							is_ally_with = FROM
							has_country_flag = united_front_member
						}
					}
				}
				add_to_temp_array = { global.ROOT_ceasefire_states = THIS }
			}
			if = {
				limit = {
					controller = {
						OR = {
							is_ally_with = FROM
							has_country_flag = united_front_member
						}
					}
					owner = {
						is_ally_with = ROOT
					}
				}
				add_to_temp_array = { global.FROM_ceasefire_states = THIS }
			}
		}

		### ROOT vs FROM ###
		### loop through the states, transferring any bordering controlled states until all possible ones are transferred
		if = {
			limit = {
				check_variable = { global.ROOT_ceasefire_states^num > 0 }
			}
			while_loop_effect = {
				limit = {
					any_of_scopes = {
						array = global.ROOT_ceasefire_states
						num_owned_neighbour_states = {
							owner = ROOT
							count > 0
						}
					}
				}
				for_each_scope_loop = {
					array = global.ROOT_ceasefire_states
					### if the state borders ROOT's territory, transfer it to ROOT
					if = {
						limit = {
							num_owned_neighbour_states = {
								owner = ROOT
								count > 0
							}
						}
						ROOT = { transfer_state = PREV }
						add_to_temp_array = { global.ROOT_ceasefire_states_to_remove = THIS }
					}
				}

				### remove any evaluated states from the array
				for_each_loop = {
					array = global.ROOT_ceasefire_states_to_remove
					remove_from_temp_array = { global.ROOT_ceasefire_states = v }
				}
			}
		}

		### FROM vs ROOT ###
		### loop through the states, transferring any bordering controlled states until all possible ones are transferred
		if = {
			limit = {
				check_variable = { global.FROM_ceasefire_states^num > 0 }
			}
			while_loop_effect = {
				limit = {
					any_of_scopes = {
						array = global.FROM_ceasefire_states
						num_owned_neighbour_states = {
							owner = FROM
							count > 0
						}
					}
				}
				for_each_scope_loop = {
					array = global.FROM_ceasefire_states
					### if the state borders FROM's territory, transfer it to FROM
					if = {
						limit = {
							num_owned_neighbour_states = {
								owner = FROM
								count > 0
							}
						}
						FROM = { transfer_state = PREV }
						add_to_temp_array = { global.FROM_ceasefire_states_to_remove = THIS }
					}
				}

				### remove any evaluated states from the array
				for_each_loop = {
					array = global.FROM_ceasefire_states_to_remove
					remove_from_temp_array = { global.FROM_ceasefire_states = v }
				}
			}
			for_each_scope_loop = {
				array = global.FROM_ceasefire_states
				owner = {
					set_state_controller = PREV
				}
			}
		}
	}
}

set_potential_national_government = {
	if = {
		limit = {
			NOT = { has_country_flag = can_assume_national_leadership }
		}
		set_country_flag = can_assume_national_leadership
	}
	if = {
		limit = {
			NOT = { has_country_flag = china_integration_unlocked }
		}
		set_country_flag = china_integration_unlocked
		custom_effect_tooltip = GXC_integrate_provinces_tt
	}
	if = {
		limit = {
			NOT = { has_variable = kr_china_provinceintegration_cost_small }
		}
		set_variable = { kr_china_provinceintegration_cost_small = 50 }
	}
	if = {
		limit = {
			NOT = { has_variable = kr_china_provinceintegration_cost_medium }
		}
		set_variable = { kr_china_provinceintegration_cost_medium = 75 }
	}
	if = {
		limit = {
			NOT = { has_variable = kr_china_provinceintegration_cost_large }
		}
		set_variable = { kr_china_provinceintegration_cost_large = 100 }
	}
	if = {
		limit = {
			NOT = { has_variable = kr_china_provinceintegration_speed }
		}
		set_variable = { kr_china_provinceintegration_speed = 90 }
	}
	if = {
		limit = {
			NOT = { has_variable = kr_china_concessionintegration_cost }
		}
		set_variable = { kr_china_concessionintegration_cost = 15 }
	}
	if = {
		limit = {
			NOT = { has_variable = kr_china_concessionintegration_speed }
		}
		set_variable = { kr_china_concessionintegration_speed = 60 }
	}
	hidden_effect = {
		every_state = {
			limit = {
				is_mainland_china = yes
				NOT = { has_variable = ambition_area_@PREV }
			}
			if = {
				limit = {
					NOT = { is_claimed_by = PREV }
				}
				add_claim_by = PREV
			}
			set_variable = { ambition_area_@PREV = 1 }
		}
	}
}

clear_potential_national_government = {
	hidden_effect = {
		clr_country_flag = can_assume_national_leadership
		clr_country_flag = china_integration_unlocked
		clear_variable = kr_china_provinceintegration_cost_small
		clear_variable = kr_china_provinceintegration_cost_medium
		clear_variable = kr_china_provinceintegration_cost_large
		clear_variable = kr_china_provinceintegration_speed
		clear_variable = kr_china_concessionintegration_cost
		clear_variable = kr_china_concessionintegration_speed
		every_state = {
			limit = {
				OR = {
					is_claimed_by = ROOT
					has_variable = ambition_area_@ROOT
				}
				NOT = { is_core_of = ROOT }
			}
			remove_claim_by = ROOT
			clear_variable = ambition_area_@ROOT
		}
	}
}

setup_army_reform = {
	if = {
		limit = {
			OR = {
				tag = QIE
				tag = FNG
			}
		}
		add_ideas = china_inadequate_army_2
		set_variable = { army_reform_var_org = -0.4 }
		set_variable = { army_reform_var_exp = 0.6 }
		set_variable = { china_army_reform_cost = 100 }
	}
	else = {
		add_ideas = china_inadequate_army_1
		set_variable = { army_reform_var_org = -0.5 }
		set_variable = { army_reform_var_exp = 0.75 }
		set_variable = { china_army_reform_cost = 150 }
	}
}

increase_army_reform_level = {
	add_to_variable = { army_reform_var_org = 0.1 }
	add_to_variable = { army_reform_var_exp = -0.15 }
	if = {
		limit = { has_idea = china_inadequate_army_1 }
		custom_effect_tooltip = china_army_reform_effect
		hidden_effect = {
			swap_ideas = {
				remove_idea = china_inadequate_army_1
				add_idea = china_inadequate_army_2
			}
		}
		set_variable = { china_army_reform_cost = 100 }
	}
	else_if = {
		limit = { has_idea = china_inadequate_army_2 }
		custom_effect_tooltip = china_army_reform_effect
		hidden_effect = {
			swap_ideas = {
				remove_idea = china_inadequate_army_2
				add_idea = china_inadequate_army_3
			}
		}
		set_variable = { china_army_reform_cost = 50 }
	}
	else_if = {
		limit = { has_idea = china_inadequate_army_3 }
		custom_effect_tooltip = china_army_reform_effect
		hidden_effect = {
			swap_ideas = {
				remove_idea = china_inadequate_army_3
				add_idea = china_inadequate_army_4
			}
		}
		set_variable = { china_army_reform_cost = 100 }
	}
	else_if = {
		limit = { has_idea = china_inadequate_army_4 }
		custom_effect_tooltip = china_army_reform_effect
		hidden_effect = {
			swap_ideas = {
				remove_idea = china_inadequate_army_4
				add_idea = china_inadequate_army_5
			}
		}
		set_variable = { china_army_reform_cost = 150 }
	}
	else_if = {
		limit = { has_idea = china_inadequate_army_5 }
		custom_effect_tooltip = china_army_reform_effect_complete
		hidden_effect = {
			remove_ideas = china_inadequate_army_5
		}
		clear_variable = army_reform_var_org
		clear_variable = army_reform_var_exp
		clear_variable = china_army_reform_cost
	}
}

increase_japanese_resistance_level_major = {
	if = {
		limit = {
			NOT = { has_variable = japanese_resistance_level }
		}
		set_variable = { japanese_resistance_level = 0.05 }
	}
	else = {
		add_to_variable = { japanese_resistance_level = 0.05 }
	}
}

increase_japanese_resistance_level_minor = {
	if = {
		limit = {
			NOT = { has_variable = japanese_resistance_level }
		}
		set_variable = { japanese_resistance_level = 0.025 }
	}
	else = {
		add_to_variable = { japanese_resistance_level = 0.025 }
	}
}

decrease_japanese_war_willingness = {
	if = {
		limit = { has_war_support > 0 }
		add_war_support = -0.1
		add_stability = -0.05
	}
	else = {
		add_stability = -0.1
	}
}

transfer_all_unit_leaders_to_ROOT = {
	every_unit_leader = {
		limit = { has_unit_leader_flag = CHI_original_unit_leader }
		set_nationality = ROOT
	}
}

transfer_all_unit_leaders_to_FROM = {
	every_unit_leader = {
		limit = { has_unit_leader_flag = CHI_original_unit_leader }
		set_nationality = FROM
	}
}

central_government_flees_to_redoubt = {
	set_global_flag = china_central_government_flees
	set_country_flag = is_national_redoubt
	hidden_effect = {
		get_current_government_type = yes
		set_party_name = {
			ideology = var:current_china_leader.current_party_ideology_group
			name = "Central Government"
			long_name = "The Central Government"
		}
		set_politics = {
			ruling_party = var:current_china_leader.current_party_ideology_group
			elections_allowed = no
		}
		meta_effect = {
			text = {
				create_country_leader = {
					name = "[LEADER_TAG]"
					desc = ""
					picture = "[PORTRAIT_TAG]"
					expire = "1965.1.1"
					ideology = [IDEOLOGY_SUBTYPE_TAG]
				}
				set_cosmetic_tag = [COSMETIC_TAG]
			}
			IDEOLOGY_TAG = "[current_china_leader.GetRulingIdeologyId]"
			IDEOLOGY_SUBTYPE_TAG = "[current_china_leader.GetRulingIdeologySubtype]"
			LEADER_TAG = "[current_china_leader.GetLeader]"
			PORTRAIT_TAG = "[current_china_leader.GetChineseLeaderPortrait]"
			COSMETIC_TAG = "[current_china_leader.GetRedoubtCosmeticTag]"
		}
	}
}
central_government_returns = {
	clr_global_flag = china_central_government_flees
	clr_country_flag = is_national_redoubt
	hidden_effect = {
		kill_country_leader = yes
		drop_cosmetic_tag = yes
		meta_effect = {
			text = {
				set_party_name = {
					ideology = [IDEOLOGY_TAG]
					name = [PARTY_NAME_TAG]
					long_name = [LONG_NAME_TAG]
				}
			}
			IDEOLOGY_TAG = "[This.GetRulingIdeologyId]"
			PARTY_NAME_TAG = "[This.GetTag]_[This.GetRulingIdeologyId]_party"
			LONG_NAME_TAG = "[This.GetTag]_[This.GetRulingIdeologyId]_party_long"
		}
		restore_previous_government_type = yes
	}
}
