#	Various useful scripted effects
#
#	By Rylock

# removes the country in scope from all wars (separately - it won't end the wars)
separate_peace_all_wars = {
	if = {
		limit = { has_war = yes }
		custom_effect_tooltip = KR_separate_peace
		hidden_effect = {
			save_event_target_as = peace_country

			# first peace out with faction leaders
			every_enemy_country = {
				limit = {
					is_faction_leader = yes
				}
				event_target:peace_country = { white_peace = PREV }
			}

			# then all non-puppets who aren't in factions
			every_enemy_country = {
				limit = {
					is_in_faction = no
					is_subject = no
				}
				event_target:peace_country = { white_peace = PREV }
			}
		}
	}
}

# ends puppet status, removes from faction and all current wars (used for rebellions)
clear_all_relations = {
	if = {
		limit = { is_subject = yes }
		overlord = {
			set_autonomy = {
				target = PREV
				autonomy_state = autonomy_free
			}
		}
	}
	if = {
		limit = { is_in_faction = yes }
		leave_faction = yes
	}
	if = {
		limit = { has_war = yes }
		separate_peace_all_wars = yes
	}
}

# forces a country to surrender (mechanically by lowering their surrender limit to 0%)
force_capitulate = {
	hidden_effect = {
		add_timed_idea = {
			idea = ready_to_surrender
			days = 3
		}
	}
}

# removes all current ministers for the country in scope (including lobe, lama, kcap, boss, naaf) - no tooltips displayed
remove_all_minister_types = {
	hidden_effect = {
		remove_ideas_with_trait = head_of_government
		remove_ideas_with_trait = foreign_minister
		remove_ideas_with_trait = economy_minister
		remove_ideas_with_trait = security_minister
		remove_ideas_with_trait = leader_of_the_british_exiles
		remove_ideas_with_trait = land_marshal_of_liv_ord
		remove_ideas_with_trait = knight_captain_of_liv_ord
		remove_ideas_with_trait = underworld_boss
		remove_ideas_with_trait = minister_of_native_affairs
		remove_ideas_with_trait = marshal_of_the_palace
	}
}

# removes all current ministers for the country in scope (including lobe) - no tooltips displayed
remove_all_ministers_and_lobe = {
	hidden_effect = {
		remove_ideas_with_trait = head_of_government
		remove_ideas_with_trait = foreign_minister
		remove_ideas_with_trait = economy_minister
		remove_ideas_with_trait = security_minister
		remove_ideas_with_trait = leader_of_the_british_exiles
	}
}

# removes all current ministers for the country in scope - no tooltips displayed
remove_all_ministers = {
	hidden_effect = {
		remove_ideas_with_trait = head_of_government
		remove_ideas_with_trait = foreign_minister
		remove_ideas_with_trait = economy_minister
		remove_ideas_with_trait = security_minister
	}
}

# removes all current ministers (other than HoG) for the country in scope - no tooltips displayed
remove_all_ministers_but_hog = {
	hidden_effect = {
		remove_ideas_with_trait = foreign_minister
		remove_ideas_with_trait = economy_minister
		remove_ideas_with_trait = security_minister
	}
}

# changes the government of the country in scope to that of ROOT (the country running the event)
copy_government_of_ROOT = {
	if = {
		limit = { ROOT = { has_government = totalist } }
		set_politics = { ruling_party = totalist elections_allowed = no }
	}
	if = {
		limit = { ROOT = { has_government = syndicalist } }
		set_politics = { ruling_party = syndicalist elections_allowed = no }
	}
	if = {
		limit = { ROOT = { has_government = radical_socialist } }
		set_politics = { ruling_party = radical_socialist elections_allowed = no }
	}
	if = {
		limit = { ROOT = { has_government = social_democrat } }
		set_politics = { ruling_party = social_democrat elections_allowed = no }
	}
	if = {
		limit = { ROOT = { has_government = social_liberal } }
		set_politics = { ruling_party = social_liberal elections_allowed = no }
	}
	if = {
		limit = { ROOT = { has_government = market_liberal } }
		set_politics = { ruling_party = market_liberal elections_allowed = no }
	}
	if = {
		limit = { ROOT = { has_government = social_conservative } }
		set_politics = { ruling_party = social_conservative elections_allowed = no }
	}
	if = {
		limit = { ROOT = { has_government = authoritarian_democrat } }
		set_politics = { ruling_party = authoritarian_democrat elections_allowed = no }
	}
	if = {
		limit = { ROOT = { has_government = paternal_autocrat } }
		set_politics = { ruling_party = paternal_autocrat elections_allowed = no }
	}
	if = {
		limit = { ROOT = { has_government = national_populist } }
		set_politics = { ruling_party = national_populist elections_allowed = no }
	}
}

# the following effects are excellent for preserving a puppet's government so it doesn't change to the overlord
# use the first command in the scope of the about-to-be-puppeted country right before the puppet command is executed
# and then the second, also in the scope of the puppet, right after
get_current_government_type = {
	clr_country_flag = was_radical_socialist
	clr_country_flag = was_syndicalist
	clr_country_flag = was_totalist
	clr_country_flag = was_social_democrat
	clr_country_flag = was_social_liberal
	clr_country_flag = was_market_liberal
	clr_country_flag = was_social_conservative
	clr_country_flag = was_authoritarian_democrat
	clr_country_flag = was_paternal_autocrat
	clr_country_flag = was_national_populist

	set_variable = { var = radsoc value = party_popularity@radical_socialist }
	set_variable = { var = synd value = party_popularity@syndicalist }
	set_variable = { var = tot value = party_popularity@totalist }
	set_variable = { var = socdem value = party_popularity@social_democrat }
	set_variable = { var = soclib value = party_popularity@social_liberal }
	set_variable = { var = marklib value = party_popularity@market_liberal }
	set_variable = { var = soccon value = party_popularity@social_conservative }
	set_variable = { var = authdem value = party_popularity@authoritarian_democrat }
	set_variable = { var = pataut value = party_popularity@paternal_autocrat }
	set_variable = { var = natpop value = party_popularity@national_populist }

	if = {
		limit = { has_government = radical_socialist }
		set_country_flag = was_radical_socialist
	}
	if = {
		limit = { has_government = syndicalist }
		set_country_flag = was_syndicalist
	}
	if = {
		limit = { has_government = totalist }
		set_country_flag = was_totalist
	}
	if = {
		limit = { has_government = social_democrat }
		set_country_flag = was_social_democrat
	}
	if = {
		limit = { has_government = social_liberal }
		set_country_flag = was_social_liberal
	}
	if = {
		limit = { has_government = market_liberal }
		set_country_flag = was_market_liberal
	}
	if = {
		limit = { has_government = social_conservative }
		set_country_flag = was_social_conservative
	}
	if = {
		limit = { has_government = authoritarian_democrat }
		set_country_flag = was_authoritarian_democrat
	}
	if = {
		limit = { has_government = paternal_autocrat }
		set_country_flag = was_paternal_autocrat
	}
	if = {
		limit = { has_government = national_populist }
		set_country_flag = was_national_populist
	}
}

restore_previous_government_type = {
	hidden_effect = {
		if = {
			limit = { has_country_flag = was_radical_socialist }
			set_politics = { ruling_party = radical_socialist }
		}
		if = {
			limit = { has_country_flag = was_syndicalist }
			set_politics = { ruling_party = syndicalist }
		}
		if = {
			limit = { has_country_flag = was_totalist }
			set_politics = { ruling_party = totalist }
		}
		if = {
			limit = { has_country_flag = was_social_democrat }
			set_politics = { ruling_party = social_democrat }
		}
		if = {
			limit = { has_country_flag = was_social_liberal }
			set_politics = { ruling_party = social_liberal }
		}
		if = {
			limit = { has_country_flag = was_market_liberal }
			set_politics = { ruling_party = market_liberal }
		}
		if = {
			limit = { has_country_flag = was_social_conservative }
			set_politics = { ruling_party = social_conservative }
		}
		if = {
			limit = { has_country_flag = was_authoritarian_democrat }
			set_politics = { ruling_party = authoritarian_democrat }
		}
		if = {
			limit = { has_country_flag = was_paternal_autocrat }
			set_politics = { ruling_party = paternal_autocrat }
		}
		if = {
			limit = { has_country_flag = was_national_populist }
			set_politics = { ruling_party = national_populist }
		}

		multiply_variable = { var = radsoc value = 100 }
		multiply_variable = { var = synd value = 100 }
		multiply_variable = { var = tot value = 100 }
		multiply_variable = { var = socdem value = 100 }
		multiply_variable = { var = soclib value = 100 }
		multiply_variable = { var = marklib value = 100 }
		multiply_variable = { var = soccon value = 100 }
		multiply_variable = { var = authdem value = 100 }
		multiply_variable = { var = pataut value = 100 }
		multiply_variable = { var = natpop value = 100 }

		set_variable = { totalpop = 100 }

		subtract_from_variable = { var = totalpop value = radsoc }
		subtract_from_variable = { var = totalpop value = synd }
		subtract_from_variable = { var = totalpop value = tot }
		subtract_from_variable = { var = totalpop value = socdem }
		subtract_from_variable = { var = totalpop value = soclib }
		subtract_from_variable = { var = totalpop value = marklib }
		subtract_from_variable = { var = totalpop value = soccon }
		subtract_from_variable = { var = totalpop value = authdem }
		subtract_from_variable = { var = totalpop value = pataut }
		subtract_from_variable = { var = totalpop value = natpop }

		if = {
			limit = {
				OR = {
					check_variable = { totalpop < 0 }
					check_variable = { totalpop > 0 }
				}
			}
			add_to_variable = { var = natpop value = totalpop }
		}

		set_popularities = {
			radical_socialist = radsoc
			syndicalist = synd
			totalist = tot
			social_democrat = socdem
			social_liberal = soclib
			market_liberal = marklib
			social_conservative = soccon
			authoritarian_democrat = authdem
			paternal_autocrat = pataut
			national_populist = natpop
		}

		clear_variable = radsoc
		clear_variable = synd
		clear_variable = tot
		clear_variable = socdem
		clear_variable = soclib
		clear_variable = marklib
		clear_variable = soccon
		clear_variable = authdem
		clear_variable = pataut
		clear_variable = natpop
		clear_variable = totalpop
	}
}

# this is used in scripted peace events to ensure that all states
# currently controlled by countries not at war with the state's owner
# have control restored to the owner - this is needed to avoid a peace conference bug
# which would draw the owner into a peace conference and be annexed
restore_control_of_all_non_enemy_states = {
	every_state = {
		limit = {
			owner = {
				NOT = { controls_state = PREV }
				PREV = {
					controller = {
						NOT = { has_war_with = PREV.PREV }
					}
				}
			}
		}
		controller = { save_event_target_as = state_controller }
		owner = {
			if = {
				limit = {
					event_target:state_controller = { is_in_faction = yes }
				}
				for_each_loop = {
					array = event_target:state_controller.faction_members
					give_military_access = var:v
				}
				set_state_controller = PREV
			}
			else = {
				if = {
					limit = {
						event_target:state_controller = { is_subject = yes }
					}
					owner = { give_military_access = var:event_target:state_controller.overlord }
				}
				owner = {
					give_military_access = event_target:state_controller
					set_state_controller = PREV
				}
			}
		}
	}
}

embargo_ROOT = {
	add_opinion_modifier = {
		modifier = embargo
		target = ROOT
	}
	reverse_add_opinion_modifier = {
		modifier = embargo
		target = ROOT
	}
}

clear_embargo_ROOT = {
	remove_opinion_modifier = {
		modifier = embargo
		target = ROOT
	}
	ROOT = {
		remove_opinion_modifier = {
			modifier = embargo
			target = PREV
		}
	}
}

embargo_PREV = {
	add_opinion_modifier = {
		modifier = embargo
		target = PREV
	}
	reverse_add_opinion_modifier = {
		modifier = embargo
		target = PREV
	}
}

clear_embargo_PREV = {
	remove_opinion_modifier = {
		modifier = embargo
		target = PREV
	}
	PREV = {
		remove_opinion_modifier = {
			modifier = embargo
			target = PREV
		}
	}
}

embargo_FROM = {
	add_opinion_modifier = {
		modifier = embargo
		target = FROM
	}
	reverse_add_opinion_modifier = {
		modifier = embargo
		target = FROM
	}
}

clear_embargo_FROM = {
	remove_opinion_modifier = {
		modifier = embargo
		target = FROM
	}
	FROM = {
		remove_opinion_modifier = {
			modifier = embargo
			target = PREV
		}
	}
}

destroy_all_ships = {
	destroy_ships = {
		type = ship_hull_light
		count = all
	}
	destroy_ships = {
		type = ship_hull_cruiser
		count = all
	}
	destroy_ships = {
		type = ship_hull_cruiser_panzerschiff
		count = all
	}
	destroy_ships = {
		type = ship_hull_cruiser_coastal_defense_ship
		count = all
	}
	destroy_ships = {
		type = ship_hull_pre_dreadnought
		count = all
	}
	destroy_ships = {
		type = ship_hull_heavy
		count = all
	}
	destroy_ships = {
		type = ship_hull_super_heavy_1
		count = all
	}
	destroy_ships = {
		type = ship_hull_submarine
		count = all
	}
	destroy_ships = {
		type = ship_hull_cruiser_submarine
		count = all
	}
	destroy_ships = {
		type = ship_hull_carrier
		count = all
	}
	destroy_ships = {
		type = ship_hull_carrier_conversion_bb
		count = all
	}
	destroy_ships = {
		type = ship_hull_carrier_conversion_ca
		count = all
	}
	destroy_ships = {
		type = ship_hull_carrier_conversion_dng
		count = all
	}
}

# use in a state scope
# has no effect for gigalopoli, enclaves, islands or wastelands
increase_state_category_by_one_level = {
	if = {
		limit = { has_state_category = one }
		set_state_category = two
	}
	else_if = {
		limit = { has_state_category = two }
		set_state_category = three
	}
	else_if = {
		limit = { has_state_category = three }
		set_state_category = four
	}
	else_if = {
		limit = { has_state_category = four }
		set_state_category = five
	}
	else_if = {
		limit = { has_state_category = five }
		set_state_category = six
	}
	else_if = {
		limit = { has_state_category = six }
		set_state_category = seven
	}
	else_if = {
		limit = { has_state_category = seven }
		set_state_category = eight
	}
	else_if = {
		limit = { has_state_category = eight }
		set_state_category = nine
	}
	else_if = {
		limit = { has_state_category = nine }
		set_state_category = eleven
	}
	else_if = {
		limit = { has_state_category = eleven }
		set_state_category = twelve
	}
}

### adds research slots until five, then gives a temporary research speed bonus
add_research_slot_until_five = {
	if = {
		limit = { has_idea = generic_research_advances }
		modify_timed_idea = {
			idea = generic_research_advances
			days = 365
		}
	}
	else_if = {
		limit = { amount_research_slots > 4 }
		add_timed_idea = {
			idea = generic_research_advances
			days = 365
		}
	}
	else = {
		add_research_slot = 1
	}
}

Faction_mergable_invite = {
	if = {
		limit = {
			FROM = {
				is_faction_leader = yes
			}
		}
		every_country = {
			limit = {
				is_in_faction_with = FROM
				is_subject = no
			}
			ROOT = {
				add_to_faction = PREV
			}
		}
	}
	add_to_faction = FROM
}

